
//160
var getIntersectionNode = function(headA, headB) {
     if(headA==null || headB==null) return null
    
    let p1=headA
    let p2=headB
    
    while(p1 !== p2){
        p1=p1==null ? headB:p1.next
        p2=p2==null ? headA:p2.next
    }
    return p1;
};

//46
   var solve = function(nums, ans, current, isVis, i) {
    if (i === nums.length) {
        ans.push([...current]);  
        return;
    }

    for (let j = 0; j < nums.length; j++) {
        if (!isVis[j]) {
            isVis[j] = true;                     
            current.push(nums[j]);                
            solve(nums, ans, current, isVis, i+1); 
            isVis[j] = false;
            current.pop();                      
        }
    }
};

var permute = function(nums) {
    let ans = [];
    let cur = [];
    let isVis = new Array(nums.length).fill(false); 
    solve(nums, ans, cur, isVis, 0);
    return ans;
};

//90
 var solve = function (nums, ans, cur, i) {
    if (i == nums.length) {
        ans.push([...cur])
        return
    }
    cur.push(nums[i])
    solve(nums, ans, cur, i + 1)
    cur.pop()
    while(i+1<nums.length && nums[i]==nums[i+1]) {i++}
    solve(nums, ans, cur, i + 1)
}
var subsetsWithDup = function(nums) {
    let ans = []
    let cur = []
    solve(nums, ans, cur, 0)
    return ans
};

